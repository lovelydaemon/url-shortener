// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecase/interfaces.go -destination=./internal/usecase/mocks.go -package=usecase
//

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	entity "github.com/lovelydaemon/url-shortener/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockShorten is a mock of Shorten interface.
type MockShorten struct {
	ctrl     *gomock.Controller
	recorder *MockShortenMockRecorder
}

// MockShortenMockRecorder is the mock recorder for MockShorten.
type MockShortenMockRecorder struct {
	mock *MockShorten
}

// NewMockShorten creates a new mock instance.
func NewMockShorten(ctrl *gomock.Controller) *MockShorten {
	mock := &MockShorten{ctrl: ctrl}
	mock.recorder = &MockShortenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShorten) EXPECT() *MockShortenMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockShorten) Get(ctx context.Context, shortURL string) (entity.Storage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, shortURL)
	ret0, _ := ret[0].(entity.Storage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockShortenMockRecorder) Get(ctx, shortURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockShorten)(nil).Get), ctx, shortURL)
}

// Store mocks base method.
func (m *MockShorten) Store(ctx context.Context, originalUrl string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, originalUrl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockShortenMockRecorder) Store(ctx, originalUrl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockShorten)(nil).Store), ctx, originalUrl)
}

// StoreBatch mocks base method.
func (m *MockShorten) StoreBatch(ctx context.Context, batch []entity.BatchItemIn) ([]entity.BatchItemOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreBatch", ctx, batch)
	ret0, _ := ret[0].([]entity.BatchItemOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreBatch indicates an expected call of StoreBatch.
func (mr *MockShortenMockRecorder) StoreBatch(ctx, batch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreBatch", reflect.TypeOf((*MockShorten)(nil).StoreBatch), ctx, batch)
}

// MockShortenRepo is a mock of ShortenRepo interface.
type MockShortenRepo struct {
	ctrl     *gomock.Controller
	recorder *MockShortenRepoMockRecorder
}

// MockShortenRepoMockRecorder is the mock recorder for MockShortenRepo.
type MockShortenRepoMockRecorder struct {
	mock *MockShortenRepo
}

// NewMockShortenRepo creates a new mock instance.
func NewMockShortenRepo(ctrl *gomock.Controller) *MockShortenRepo {
	mock := &MockShortenRepo{ctrl: ctrl}
	mock.recorder = &MockShortenRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortenRepo) EXPECT() *MockShortenRepoMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockShortenRepo) Get(ctx context.Context, shortURL string) (entity.Storage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, shortURL)
	ret0, _ := ret[0].(entity.Storage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockShortenRepoMockRecorder) Get(ctx, shortURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockShortenRepo)(nil).Get), ctx, shortURL)
}

// Store mocks base method.
func (m *MockShortenRepo) Store(ctx context.Context, originalUrl string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, originalUrl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockShortenRepoMockRecorder) Store(ctx, originalUrl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockShortenRepo)(nil).Store), ctx, originalUrl)
}

// StoreBatch mocks base method.
func (m *MockShortenRepo) StoreBatch(ctx context.Context, batch []entity.BatchItemIn) ([]entity.BatchItemOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreBatch", ctx, batch)
	ret0, _ := ret[0].([]entity.BatchItemOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreBatch indicates an expected call of StoreBatch.
func (mr *MockShortenRepoMockRecorder) StoreBatch(ctx, batch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreBatch", reflect.TypeOf((*MockShortenRepo)(nil).StoreBatch), ctx, batch)
}

// MockPing is a mock of Ping interface.
type MockPing struct {
	ctrl     *gomock.Controller
	recorder *MockPingMockRecorder
}

// MockPingMockRecorder is the mock recorder for MockPing.
type MockPingMockRecorder struct {
	mock *MockPing
}

// NewMockPing creates a new mock instance.
func NewMockPing(ctrl *gomock.Controller) *MockPing {
	mock := &MockPing{ctrl: ctrl}
	mock.recorder = &MockPingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPing) EXPECT() *MockPingMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockPing) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockPingMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPing)(nil).Ping), ctx)
}

// MockPingRepo is a mock of PingRepo interface.
type MockPingRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPingRepoMockRecorder
}

// MockPingRepoMockRecorder is the mock recorder for MockPingRepo.
type MockPingRepoMockRecorder struct {
	mock *MockPingRepo
}

// NewMockPingRepo creates a new mock instance.
func NewMockPingRepo(ctrl *gomock.Controller) *MockPingRepo {
	mock := &MockPingRepo{ctrl: ctrl}
	mock.recorder = &MockPingRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPingRepo) EXPECT() *MockPingRepoMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockPingRepo) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockPingRepoMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPingRepo)(nil).Ping), ctx)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// DeleteURLs mocks base method.
func (m *MockUser) DeleteURLs(ctx context.Context, urls []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteURLs", ctx, urls)
}

// DeleteURLs indicates an expected call of DeleteURLs.
func (mr *MockUserMockRecorder) DeleteURLs(ctx, urls any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteURLs", reflect.TypeOf((*MockUser)(nil).DeleteURLs), ctx, urls)
}

// GetURLs mocks base method.
func (m *MockUser) GetURLs(ctx context.Context) ([]entity.UserURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLs", ctx)
	ret0, _ := ret[0].([]entity.UserURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLs indicates an expected call of GetURLs.
func (mr *MockUserMockRecorder) GetURLs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLs", reflect.TypeOf((*MockUser)(nil).GetURLs), ctx)
}

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// DeleteURLs mocks base method.
func (m *MockUserRepo) DeleteURLs(ctx context.Context, urls ...entity.StorageWithUser) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range urls {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteURLs", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteURLs indicates an expected call of DeleteURLs.
func (mr *MockUserRepoMockRecorder) DeleteURLs(ctx any, urls ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, urls...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteURLs", reflect.TypeOf((*MockUserRepo)(nil).DeleteURLs), varargs...)
}

// GetURLs mocks base method.
func (m *MockUserRepo) GetURLs(ctx context.Context) ([]entity.UserURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLs", ctx)
	ret0, _ := ret[0].([]entity.UserURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLs indicates an expected call of GetURLs.
func (mr *MockUserRepoMockRecorder) GetURLs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLs", reflect.TypeOf((*MockUserRepo)(nil).GetURLs), ctx)
}
