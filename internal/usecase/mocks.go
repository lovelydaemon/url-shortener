// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecase/interfaces.go -destination=./internal/usecase/mocks.go -package=usecase
//

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	entity "github.com/lovelydaemon/url-shortener/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockShorten is a mock of Shorten interface.
type MockShorten struct {
	ctrl     *gomock.Controller
	recorder *MockShortenMockRecorder
}

// MockShortenMockRecorder is the mock recorder for MockShorten.
type MockShortenMockRecorder struct {
	mock *MockShorten
}

// NewMockShorten creates a new mock instance.
func NewMockShorten(ctrl *gomock.Controller) *MockShorten {
	mock := &MockShorten{ctrl: ctrl}
	mock.recorder = &MockShortenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShorten) EXPECT() *MockShortenMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockShorten) Get(ctx context.Context, token string) (entity.StorageItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, token)
	ret0, _ := ret[0].(entity.StorageItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockShortenMockRecorder) Get(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockShorten)(nil).Get), ctx, token)
}

// Store mocks base method.
func (m *MockShorten) Store(ctx context.Context, originalUrl, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, originalUrl, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockShortenMockRecorder) Store(ctx, originalUrl, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockShorten)(nil).Store), ctx, originalUrl, token)
}

// MockShortenRepo is a mock of ShortenRepo interface.
type MockShortenRepo struct {
	ctrl     *gomock.Controller
	recorder *MockShortenRepoMockRecorder
}

// MockShortenRepoMockRecorder is the mock recorder for MockShortenRepo.
type MockShortenRepoMockRecorder struct {
	mock *MockShortenRepo
}

// NewMockShortenRepo creates a new mock instance.
func NewMockShortenRepo(ctrl *gomock.Controller) *MockShortenRepo {
	mock := &MockShortenRepo{ctrl: ctrl}
	mock.recorder = &MockShortenRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortenRepo) EXPECT() *MockShortenRepoMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockShortenRepo) Get(ctx context.Context, token string) (entity.StorageItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, token)
	ret0, _ := ret[0].(entity.StorageItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockShortenRepoMockRecorder) Get(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockShortenRepo)(nil).Get), ctx, token)
}

// Store mocks base method.
func (m *MockShortenRepo) Store(ctx context.Context, originalUrl, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, originalUrl, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockShortenRepoMockRecorder) Store(ctx, originalUrl, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockShortenRepo)(nil).Store), ctx, originalUrl, token)
}

// MockPing is a mock of Ping interface.
type MockPing struct {
	ctrl     *gomock.Controller
	recorder *MockPingMockRecorder
}

// MockPingMockRecorder is the mock recorder for MockPing.
type MockPingMockRecorder struct {
	mock *MockPing
}

// NewMockPing creates a new mock instance.
func NewMockPing(ctrl *gomock.Controller) *MockPing {
	mock := &MockPing{ctrl: ctrl}
	mock.recorder = &MockPingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPing) EXPECT() *MockPingMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockPing) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockPingMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPing)(nil).Ping), ctx)
}

// MockPingRepo is a mock of PingRepo interface.
type MockPingRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPingRepoMockRecorder
}

// MockPingRepoMockRecorder is the mock recorder for MockPingRepo.
type MockPingRepoMockRecorder struct {
	mock *MockPingRepo
}

// NewMockPingRepo creates a new mock instance.
func NewMockPingRepo(ctrl *gomock.Controller) *MockPingRepo {
	mock := &MockPingRepo{ctrl: ctrl}
	mock.recorder = &MockPingRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPingRepo) EXPECT() *MockPingRepoMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockPingRepo) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockPingRepoMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPingRepo)(nil).Ping), ctx)
}
